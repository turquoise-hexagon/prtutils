#!/bin/bash
#
# prtversion - compare local versions to repology versions

die() {
    printf '%s\n' "${1:-usage : ${0##*/} <repo>}" >&2

    exit 1
}

sanitize_version() {
    # remove extra characters
    read -ra split <<< ${1//[^0-9]/ }

    # remove extra zeros
    for index in "${!split[@]}"; {
        [[ ${split[index]} =~ 0*(.+) ]] &&
            split[index]=${BASH_REMATCH[1]}
    }

    # turn into a proper version string
    str=${split[*]}
    str=${str// /.}

    # remove trailing zeros
    while [[ $str =~ '.0'$ ]]; do
        str=${str%.0}
    done

    printf '%s\n' "$str"
}

# store list of package files
while read -r path pkg; do
    for repo; {
        [[ ${path##*/} == "$repo" ]] && {
            pkgfiles+=("$path/$pkg/Pkgfile")
        }
    }
done <<< $(prt-get printf '%p %n\n')

((${#pkgfiles[@]})) || die

# store list of package versions
for pkgfile in "${pkgfiles[@]}"; {
    unset name commit version

    . "$pkgfile" 2> /dev/null &&
        # don't store git & commit packages
        [[ ! $commit && $version != git ]] && {
            pkgs+=("$name")
            vers+=("$version")
        }
}

# store a list of URLs
for pkg in "${pkgs[@]}"; {
    urls+=("https://repology.org/badge/latest-versions/$pkg.svg?header=")
}

# parse svgs
((index == 0))

while IFS= read -r line; do
    [[ ${line##*middle\">} =~ ([^<, ]+) ]] && {
        remote=${BASH_REMATCH[1]}

        pkg=${pkgs[index]}
        ver=${vers[index]}

        # take decision
        case $(sanitize_version "$remote") in
           '') out_u+=("$pkg : $ver -> $remote");;
            "$(sanitize_version "$ver")") ;; # do nothing
            *) out_m+=("$pkg : $ver -> $remote");;
        esac
    }

    ((++index))
done <<< $(curl -w '\n' -s "${urls[@]}")

# print everything
for line in "${out_m[@]}" "${out_u[@]}"; {
    printf '%s\n' "$line"
}
