#!/bin/bash
#
# prtversion - compare local versions to repology versions

# ---
# settings
# ---

readonly USER_AGENT='camille at laserbat dot pw'
readonly API_URL=https://repology.org/api/v1/project

# ---
# functions
# ---

die() {
    printf '%s\n' "$1" >&2

    exit 1
}

sanitize_version() {
    local _version _index _output
    local -a _version_parts

    _version=$1

    # remove extra characters
    read -r -a _version_parts <<< ${_version//[^0-9]/ }

    # remove leading 0s
    for _index in "${!_version_parts[@]}"; do
        if [[ ${_version_parts[_index]} =~ '0'*(.+) ]]; then
            _version_parts[_index]=${BASH_REMATCH[1]}
        fi
    done

    # put back together
    _output=${_version_parts[*]}
    _output=${_output// /.}

    # remove trailing .0s
    while [[ $_output =~ '.0'$ ]]; do
        _output=${_output%.0}
    done

    printf '%s\n' "$_output"
}

# ---
# main
# ---

if (($# != 1)); then
    die "usage : ${0##*/} <repo>"
fi

readonly repo_name=$1

declare -A package_metadatas
declare -a package_names
declare -a urls

while IFS=' ' read -r repo_path package_name; do
    # select only relevant packages
    if [[ $repo_path =~ /$repo_name$ ]]; then
        pkgfile_path=$repo_path/$package_name/Pkgfile

        if [[ -f $pkgfile_path ]]; then
            unset commit name version

            if ! . "$pkgfile_path"; then
                die "error : failed to source '$pkgfile_path'"
            fi

            # no git package, no commit package
            if [[ $version != git && ! $commit ]]; then
                package_metadatas[$name]=$version

                package_names+=("$name")
                urls+=("$API_URL/$name")
            fi
        fi
    fi
done <<< $(prt-get printf '%p %n\n')

if ((${#package_names[@]} == 0)); then
    die "error : no packages in '$repo_name'"
fi

index=0

while IFS= read -r json; do
    declare -A candidate_versions

    while IFS= read -r candidate_version; do
        # no empty versions
        if [[ $candidate_version ]]; then
            candidate_version=$(sanitize_version "$candidate_version")

            candidate_versions[$candidate_version]=
        fi
    done \
    <<< $(
        # select non-outdated versions
        jq -r \
            '.[] |
            select(
                .status == "newest"
            ) .version' \
            <<< $json
        )
    
    if ((${#candidate_version[@]} != 0)); then
        package_name=${package_names[index]}
        package_version=$(sanitize_version "${package_metadatas[$package_name]}")
        diff_version_flag=0
        
        declare -a diff_version_parts

        for candidate_version in "${!candidate_versions[@]}"; do
            if [[ $candidate_version != $package_version ]]; then
                diff_version_flag=1

                diff_version_parts+=("$candidate_version")
            fi
        done

        # only output if there is a difference
        if ((diff_version_flag == 1)); then
            diff_version=${diff_version_parts[*]}

            printf '%s: %s -> %s\n' "$package_name" "$package_version" "$diff_version"
        fi

        unset diff_version_parts
    fi

    unset candidate_versions

    ((++index))
done <<< $(curl -A "$USER_AGENT" -w '\n' -s "${urls[@]}")
