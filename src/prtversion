#!/bin/bash
#
# prtversion - compare local versions to repology versions

readonly USER_AGENT='camille at laserbat dot pw'
readonly API_URL=https://repology.org/api/v1/project

die() {
    printf '%s\n' "$1" >&2

    exit 1
}

sanitize_version() {
    local _version
    local _index
    local _output
    local -a _version_parts

    _version=$1

    read -r -a _version_parts <<< ${_version//[^0-9]/ }

    for _index in "${!_version_parts[@]}"; do
        if [[ ${_version_parts[_index]} =~ 0*(.+) ]]; then
            _version_parts[_index]=${BASH_REMATCH[1]}
        fi
    done

    _output=${_version_parts[*]}
    _output=${_output// /.}
    _output=${_output%.0}

    printf '%s\n' "$_output"
}

if (($# != 1)); then
    die "usage : ${0##*/} <repo>"
fi

readonly repo=$1

declare -A packages

while IFS=' ' read -r repo_path package_name; do
    if [[ $repo_path =~ /$repo$ ]]; then
        pkgfile_path=$repo_path/$package_name/Pkgfile

        if [[ -f $pkgfile_path ]]; then
            unset commit name version

            if ! . "$pkgfile_path" &> /dev/null; then
                die "error : failed to source '$pkgfile_path'"
            fi

            if [[ $version != git && ! $commit ]]; then
                packages[$name]=$version
            fi
        fi
    fi
done \
<<< $(prt-get printf '%p %n\n')

if ((${#packages[@]} == 0)); then
    die "error : no packages found in '$repo'"
fi

for package_name in "${!packages[@]}"; do
    declare -A candidate_versions

    while IFS= read -r candidate_version; do
        if [[ $candidate_version ]]; then
            candidate_version=$(sanitize_version "$candidate_version")

            candidate_versions[$candidate_version]=
        fi
    done \
    <<< $(
        jq -r \
        '.[] | select(
            .status == "newest"
        ) .version' \
        <<< $(
            curl -A "$USER_AGENT" -s "$API_URL/$package_name"
        )
    )

    package_version=$(sanitize_version "${packages[$package_name]}")

    if ((${#candidate_version[@]} != 0)); then
        diff_version_flag=0

        declare -a diff_version_parts

        for candidate_version in "${!candidate_versions[@]}"; do
            if [[ $candidate_version != $package_version ]]; then
                diff_version_flag=1

                diff_version_parts+=("$candidate_version")
            fi
        done

        diff_version=${diff_version_parts[*]}

        unset diff_version_parts

        if ((diff_version_flag == 1)); then
            printf '%s: %s -> %s\n' "$package_name" "$package_version" "$diff_version"
        fi
    fi

    unset candidate_versions
done
